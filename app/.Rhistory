df <- rbind(df, temp)
}
df_clean <- df %>%
mutate(Last_Update = as.Date(Last_Update)) %>%
filter(ISO3 == 'USA') %>%
filter(FIPS < 100)
save(df_clean, file="output/data_up_to_date.RData")
rm(df)
rm(temp)
# there are 50 states and District of Columbia
# if the data source is not available, will use the data stored (up to 10-08-2020)
# name: "data_use.Rdata"
save(df_clean, file="output/data_up_to_date.RData")
save(df_clean, file="output/data_up_to_date.RData")
save(df_clean, file="./output/data_up_to_date.RData")
# packages used
packages.used <-
as.list(c("tidyverse", "haven", "plotly", "shiny", "ggplot2", "shinythemes", "tmap", "sf",
"rgdal", "RColorBrewer","tibble", "viridis", "RCurl", "leaflet", "zoo", "lubridate"))
# require and install packages
check.pkg <- function(x){
if(!require(x, character.only=T))
install.packages(x, character.only=T, dependence=T)
}
lapply(packages.used, check.pkg)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
runApp('covid19')
runApp('covid19')
runApp()
runApp()
runApp()
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp()
runApp('covid19')
library(shinydashboard)
runApp('covid19')
runApp()
runApp()
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp()
runApp('covid19')
runApp('covid19')
runApp('covid19')
?fluidPage
runApp('covid19')
df_clean
df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths))
state.name
tmp1 <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths))
tmp1$Province_State %>% unique()
df_clean <- df %>%
mutate(Last_Update = as.Date(Last_Update)) %>%
filter(ISO3 == 'USA') %>%
filter(FIPS < 100) %>%
droplevels()
tmp1$Province_State %>% unique()
tmp1 <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths))
tmp1$Province_State %>% unique()
death_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths))
death_plt
death_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths)) %>%
filter(Province_State == 'Alabama')
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line()+
theme_minimal()
s <- state.name[1]
death_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths)) %>%
filter(Province_State == s)
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line()+
labs(title = paste0('Number of Deaths in', s, 'over time'),
x='',
y='')+
theme_minimal()
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line()+
geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
View(death_plt)
df_clean %>%
filter(Province_State == s)
df%>%
filter(Province_State == s)
# read up to date data from JHU
urlpart1 <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/"
start <- as.Date("2020-04-12")
if(month(start)<10){
if(day(start)<10){
df <- read.csv(text = getURL(paste0(urlpart1, '0', month(start), "-", '0', day(start), "-", year(start), ".csv")))
}else{
df <- read.csv(text = getURL(paste0(urlpart1, '0', month(start), "-", day(start), "-", year(start), ".csv")))
}
}else{
if(day(start)<10){
df <- read.csv(text = getURL(paste0(urlpart1, month(start), "-", '0', day(start), "-", year(start), ".csv")))
}else{
df <- read.csv(text = getURL(paste0(urlpart1, month(start), "-", day(start), "-", year(start), ".csv")))
}
}
for (i in (start+1):(Sys.Date()-1)) {
t <- as.Date(i)
if(month(t)<10){
if(day(t)<10){
temp <- read.csv(text = getURL(paste0(urlpart1, '0', month(t), "-", '0', day(t), "-", year(t), ".csv")))
}else{
temp <- read.csv(text = getURL(paste0(urlpart1, '0', month(t), "-", day(t), "-", year(t), ".csv")))
}
}else{
if(day(t)<10){
temp <- read.csv(text = getURL(paste0(urlpart1, month(t), "-", '0', day(t), "-", year(t), ".csv")))
}else{
temp <- read.csv(text = getURL(paste0(urlpart1, month(t), "-", day(t), "-", year(t), ".csv")))
}
}
df <- rbind(df, temp)
}
df_clean <- df %>%
mutate(Last_Update = as.Date(Last_Update)) %>%
filter(ISO3 == 'USA') %>%
filter(FIPS < 100) %>%
droplevels()
save(df_clean, file="./output/data_up_to_date.RData")
s <- state.name[1]
death_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths)) %>%
filter(Province_State == s)
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line()+
geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line()+
#geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
View(df_clean)
df_clean %>% filter(Province_State=="Minnesota", Last_Update<as.Date("2020-07-10"))
tmp <- df_clean %>% filter(Province_State=="Minnesota", Last_Update<as.Date("2020-07-10"))
View(tmp)
df_clean
View(df_clean)
which(df_clean$Confirmed<0)
which(df_clean$Deaths<0)
which(df_clean$Recovered<0)
which(df_clean$Active<0)
which(df_clean$Incident_Rate<0)
which(df_clean$People_Hospitalized<0)
which(df_clean$Active<0)
df_clean[4308,]
tmpc <- which(df_clean$Active<0)
df_clean$Active[tmpc] <- mean(df_clean$Active[tmpc-1], df_clean$Active[tmpc+1])
df_clean[4308,]
df_clean[4307,]
df_clean[4309,]
df_clean$Active[tmpc-1]
df_clean$Active[tmpc+1]
mean(df_clean$Active[tmpc-1], df_clean$Active[tmpc+1])
tmpc <- which(df_clean$Active<0)
df_clean$Active[tmpc] <- mean(c(df_clean$Active[tmpc-1], df_clean$Active[tmpc+1]))
df_clean[4308,]
df_clean <- df %>%
mutate(Last_Update = as.Date(Last_Update)) %>%
filter(ISO3 == 'USA') %>%
filter(FIPS < 100) %>%
droplevels()
tmpc <- which(df_clean$Active<0)
df_clean$Active[tmpc] <- mean(c(df_clean$Active[tmpc-1], df_clean$Active[tmpc+1]))
df_clean[4308,]
round(mean(c(df_clean$Active[tmpc-1], df_clean$Active[tmpc+1])),0)
df_clean <- df %>%
mutate(Last_Update = as.Date(Last_Update)) %>%
filter(ISO3 == 'USA') %>%
filter(FIPS < 100) %>%
droplevels()
tmpc <- which(df_clean$Active<0)
df_clean$Active[tmpc] <- round(mean(c(df_clean$Active[tmpc-1], df_clean$Active[tmpc+1])),0)
df_clean <- df %>%
mutate(Last_Update = as.Date(Last_Update)) %>%
filter(ISO3 == 'USA') %>%
filter(FIPS < 100) %>%
droplevels() %>%
mutate(Recovered=ifelse(is.na(Recovered), 0, Recovered))
tmpc <- which(df_clean$Active<0)
df_clean$Active[tmpc] <- round(mean(c(df_clean$Active[tmpc-1], df_clean$Active[tmpc+1])),0)
save(df_clean, file="./output/data_up_to_date.RData")
s
death_plt
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line(col=total_deaths)+
#geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line(col="red")+
#geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
library(RColorBrewer)
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line(col=cbPalette[1])+
#geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
cbPalette <- c("#56B4E9", "#D55E00", "#009E73", "#F0E442", "#E69F00", "#0072B2", "#CC79A7", "#F0E449")
ggplot(death_plt, aes(Last_Update, total_deaths))+
geom_line(col=cbPalette[1])+
#geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
death_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed)) %>%
filter(Province_State == s)
ggplot(death_plt)+
geom_line(mapping = aes(Last_Update, total_deaths), col=cbPalette[1])+
geom_line(mapping = aes(Last_Update, total_active), col=cbPalette[2])+
#geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
ggplot(death_plt)+
geom_line(mapping = aes(Last_Update, total_deaths), col=cbPalette[1])+
geom_line(mapping = aes(Last_Update, total_active), col=cbPalette[2])+
geom_line(mapping = aes(Last_Update, total_confirmed), col=cbPalette[3])+
#geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
state.name
s <- state.name[5]
death_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed)) %>%
filter(Province_State == s)
ggplot(death_plt)+
geom_line(mapping = aes(Last_Update, total_deaths), col=cbPalette[1])+
geom_line(mapping = aes(Last_Update, total_active), col=cbPalette[2])+
geom_line(mapping = aes(Last_Update, total_confirmed), col=cbPalette[3])+
#geom_point()+
labs(title = paste0('Number of Deaths in ', s, ' over time'),
x='',
y='')+
theme_minimal()
df_clean$Last_Update %>% max()
#-------------------tab3 Search Panel
s <- state.name[5:6]
df_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed),
total_recovered=sum(Recovered)
) %>%
filter(Province_State == s)
s
df_plt
View(df_plt)
df_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed),
total_recovered=sum(Recovered)
) %>%
filter(Province_State %in% s)
View(df_plt)
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
state1
reactive(input$state1)
state1 <- reactive(input$state1)
state1
#state2 <- reactive(input$state2)
df_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed),
total_recovered=sum(Recovered)
) %>%
filter(Province_State %in% state1()# | Province_State == state2()
)
runApp('covid19')
View(df_plt)
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp()
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp()
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp()
runApp('covid19')
runApp('covid19')
runApp('covid19')
df_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed),
total_recovered=sum(Recovered)) %>%
filter(Province_State %in% s# | Province_State == state2()
)
View(df_plt)
ggplot(df_plt)+
geom_line(mapping = aes(Last_Update, total_deaths, col=Province_State))+
#geom_line(mapping = aes(Last_Update, total_active), col=cbPalette[2])+
#geom_line(mapping = aes(Last_Update, total_confirmed), col=cbPalette[3])+
labs(title = paste0('Number of Deaths in','over time'),
x='',
y='')+
scale_fill_manual(values=cbPalette)+
theme_minimal()
runApp('covid19')
runApp('covid19')
runApp()
runApp('covid19')
runApp('covid19')
s = state.name[4:5]
df_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed),
total_recovered=sum(Recovered)) %>%
filter(Province_State %in% input$state1# | Province_State == state2()
)
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
runApp('covid19')
# df_plt <- reactive(df_clean %>%
#     group_by(Province_State, Last_Update) %>%
#     summarise(total_deaths=sum(Deaths),
#               total_active=sum(Active),
#               total_confirmed=sum(Confirmed),
#               total_recovered=sum(Recovered)) %>%
#     filter(Province_State %in% input$state1# | Province_State == state2()
#     ) )
#
q<-ggplot(df_plt)+
geom_line(mapping = aes(Last_Update, total_deaths, col=Province_State))+
#geom_line(mapping = aes(Last_Update, total_active), col=cbPalette[2])+
#geom_line(mapping = aes(Last_Update, total_confirmed), col=cbPalette[3])+
labs(title = paste0('Number of Deaths in','over time'),
x='',
y='')+
scale_fill_manual(values=cbPalette)+
theme_minimal()
s = state.name[4:5]
df_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed),
total_recovered=sum(Recovered)) %>%
filter(Province_State %in% input$state1# | Province_State == state2()
)
s = state.name[4:5]
df_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed),
total_recovered=sum(Recovered)) %>%
filter(Province_State %in% input$state1# | Province_State == state2()
)
s = state.name[4:5]
df_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed),
total_recovered=sum(Recovered)) %>%
filter(Province_State %in% input$state1# | Province_State == state2()
)
df_plt <- df_clean %>%
group_by(Province_State, Last_Update) %>%
summarise(total_deaths=sum(Deaths),
total_active=sum(Active),
total_confirmed=sum(Confirmed),
total_recovered=sum(Recovered)) %>%
filter(Province_State %in% s# | Province_State == state2()
)
# df_plt <- reactive(df_clean %>%
#     group_by(Province_State, Last_Update) %>%
#     summarise(total_deaths=sum(Deaths),
#               total_active=sum(Active),
#               total_confirmed=sum(Confirmed),
#               total_recovered=sum(Recovered)) %>%
#     filter(Province_State %in% input$state1# | Province_State == state2()
#     ) )
#
q<-ggplot(df_plt)+
geom_line(mapping = aes(Last_Update, total_deaths, col=Province_State))+
#geom_line(mapping = aes(Last_Update, total_active), col=cbPalette[2])+
#geom_line(mapping = aes(Last_Update, total_confirmed), col=cbPalette[3])+
labs(title = paste0('Number of Deaths in','over time'),
x='',
y='')+
scale_fill_manual(values=cbPalette)+
theme_minimal()
q
# df_plt <- reactive(df_clean %>%
#     group_by(Province_State, Last_Update) %>%
#     summarise(total_deaths=sum(Deaths),
#               total_active=sum(Active),
#               total_confirmed=sum(Confirmed),
#               total_recovered=sum(Recovered)) %>%
#     filter(Province_State %in% input$state1# | Province_State == state2()
#     ) )
#
q<-ggplot(df_plt)+
geom_line(mapping = aes(Last_Update, total_deaths, col=Province_State))+
#geom_line(mapping = aes(Last_Update, total_active), col=cbPalette[2])+
#geom_line(mapping = aes(Last_Update, total_confirmed), col=cbPalette[3])+
# labs(title = paste0('Number of Deaths in','over time'),
#      x='',
#      y='')+
scale_fill_manual(values=cbPalette)+
theme_minimal()
q
runApp('covid19')
getwd()
runApp('covid19')
runApp()
runApp('covid19')
