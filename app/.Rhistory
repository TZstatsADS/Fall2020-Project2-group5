setwd("~/Documents/GitHub/Fall2020-Project2-group5/app")
#if already has countries_shapeFile.RData under output folder, no need to process it again
#otherwise, read files from data folder to create countries_shapeFile.RData under output folder
if(file.exists(output_shapefile_filepath)){
load(output_shapefile_filepath)
}else{
countries <- readOGR(dsn ="../data/ne_50m_admin_0_countries",
layer = "ne_50m_admin_0_countries",
encoding = "utf-8",use_iconv = T,
verbose = FALSE)
save(countries, file=output_shapefile_filepath)
}
#make a copy of aggre_cases dataframe
aggre_cases_copy <- as.data.frame(aggre_cases)
aggre_cases_copy
aggre_cases_copy$country_names <- as.character(rownames(aggre_cases_copy))
aggre_cases_copy
#make a copy of aggre_death dataframe
aggre_death_copy <- as.data.frame(aggre_death)
aggre_death_copy$country_names <- as.character(rownames(aggre_death_copy))
#use save.image() at any time to save all environment data into an .RData file
save.image(file='./output/covid-19.RData')
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#-------------------------------------------------App Server----------------------------------
library(viridis)
library(dplyr)
library(tibble)
library(tidyverse)
library(shinythemes)
library(sf)
library(RCurl)
library(tmap)
library(rgdal)
library(leaflet)
library(shiny)
library(shinythemes)
library(plotly)
library(ggplot2)
#can run RData directly to get the necessary date for the app
#global.r will enable us to get new data everyday
#update data with automated script
source("global.R")
#load('./output/covid-19.RData')
shinyServer(function(input, output) {
#----------------------------------------
#tab panel 1 - Home Plots
#preapare data for plot
output$case_overtime <- renderPlotly({
#determin the row index for subset
req(input$log_scale)
end_date_index <- which(date_choices == input$date)
#if log scale is not enabled, we will just use cases
if (input$log_scale == FALSE) {
#render plotly figure
case_fig <- plot_ly()
#add comfirmed case lines
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~as.numeric(aggre_cases[input$country,])[1:end_date_index],
line = list(color = 'rgba(67,67,67,1)', width = 2),
name = 'Confirmed Cases')
#add death line
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~as.numeric(aggre_death[input$country,])[1:end_date_index],
name = 'Death Toll')
#set the axis for the plot
case_fig <- case_fig %>%
layout(title = paste0(input$country,'\t','Trend'),
xaxis = list(title = 'Date',showgrid = FALSE),
yaxis = list(title = 'Comfirmed Cases/Deaths',showgrid=FALSE)
)
}
#if enable log scale, we need to take log of the y values
else{
#render plotly figure
case_fig <- plot_ly()
#add comfirmed case lines
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~log(as.numeric(aggre_cases[input$country,])[1:end_date_index]),
line = list(color = 'rgba(67,67,67,1)', width = 2),
name = 'Confirmed Cases')
#add death line
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~log(as.numeric(aggre_death[input$country,])[1:end_date_index]),
name = 'Death Toll')
#set the axis for the plot
case_fig <- case_fig %>%
layout(title = paste0(input$country,'<br>','\t','Trends'),
xaxis = list(title = 'Date',showgrid = FALSE),
yaxis = list(title = 'Comfirmed Cases/Deaths(Log Scale)',showgrid=FALSE)
)
}
return(case_fig)
})
#----------------------------------------
#tab panel 2 - Maps
data_countries <- reactive({
if(!is.null(input$choices)){
if(input$choices == "Cases"){
return(aggre_cases_copy)
}else{
return(aggre_death_copy)
}}
})
#get the largest number of count for better color assignment
maxTotal<- reactive(max(data_countries()%>%select_if(is.numeric), na.rm = T))
#color palette
pal <- reactive(colorNumeric(c("#FFFFFFFF" ,rev(inferno(256))), domain = c(0,log(binning(maxTotal())))))
output$map <- renderLeaflet({
map <-  leaflet(countries) %>%
addProviderTiles("Stadia.Outdoors", options = providerTileOptions(noWrap = TRUE)) %>%
setView(0, 30, zoom = 3) })
observe({
if(!is.null(input$date_map)){
select_date <- format.Date(input$date_map,'%Y-%m-%d')
}
if(input$choices == "Cases"){
#merge the spatial dataframe and cases dataframe
aggre_cases_join <- merge(countries,
data_countries(),
by.x = 'NAME',
by.y = 'country_names',sort = FALSE)
#pop up for polygons
country_popup <- paste0("<strong>Country: </strong>",
aggre_cases_join$NAME,
"<br><strong>",
"Total Cases: ",
aggre_cases_join[[select_date]],
"<br><strong>")
leafletProxy("map", data = aggre_cases_join)%>%
addPolygons(fillColor = pal()(log((aggre_cases_join[[select_date]])+1)),
layerId = ~NAME,
fillOpacity = 1,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
} else {
#join the two dfs together
aggre_death_join<- merge(countries,
data_countries(),
by.x = 'NAME',
by.y = 'country_names',
sort = FALSE)
#pop up for polygons
country_popup <- paste0("<strong>Country: </strong>",
aggre_death_join$NAME,
"<br><strong>",
"Total Deaths: ",
aggre_death_join[[select_date]],
"<br><strong>")
leafletProxy("map", data = aggre_death_join)%>%
addPolygons(fillColor = pal()(log((aggre_death_join[[select_date]])+1)),
layerId = ~NAME,
fillOpacity = 1,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
}
})
})
#load('./output/covid-19.RData')
shinyUI(navbarPage(title = 'COVID-19',
fluid = TRUE,
collapsible = TRUE,
#Select whichever theme works for the app
theme = shinytheme("journal"),
#--------------------------
#tab panel 1 - Home
tabPanel("Home",icon = icon("home"),
fluidPage(
fluidRow(
column(12,
h1("Global Cases overview across time"),
fluidRow(
#select the date until now
column(6,
sliderInput('date','Date Unitl:',
#first day of data recording
min = as.Date(date_choices[1]),
#present day of data recording
max = as.Date(tail(date_choices,1)),
value = as.Date(date_choices[1]),
timeFormat = "%Y-%m-%d",
animate = TRUE, step = 5),
fluidRow(
#select the country we want to see the trend
column(6,
selectInput('country','Which Country?',
choices = country_names_choices,
selected = 'United States of America')),
#select whether want case number in log-scale or not
column(6,
radioButtons("log_scale", "In Log Scale:",
choices = c(TRUE,FALSE),
selected = FALSE))
)
),
#render plotly output
column(width = 6,
plotlyOutput('case_overtime'))
)
)
)
)
),
#--------------------------
#tab panel 2 - Map
tabPanel("Maps",icon = icon("map-marker-alt"),div(class = 'outer',
leafletOutput("map", width = "100%", height = "1200"),
absolutePanel(id = "control", class = "panel panel-default", fixed = TRUE, draggable = TRUE,
top = 300, left = 20, right = "auto", bottom = "auto", width = 250, height = "auto",
selectInput('choices','Which data to visualize:',
choices = c('Cases','Death'),
selected = c('Cases')),
sliderInput('date_map','Input Date:',
#first day of data recording
min = as.Date(date_choices[1]),
#present day of data recording
max = as.Date(tail(date_choices,1)),
value = as.Date('2020-04-01','%Y-%m-%d'),
timeFormat = "%Y-%m-%d",
animate = TRUE, step = 5),
style = "opacity: 0.80"))),
# ----------------------------------
#tab panel 3 - Source
tabPanel("Data Source",icon = icon("cloud-download"),
HTML(
"<h2> Data Source : </h2>
<h4> <p><li><a href='https://coronavirus.jhu.edu/map.html'>Coronavirus COVID-19 Global Cases map Johns Hopkins University</a></li></h4>
<h4><li>COVID-19 Cases : <a href='https://github.com/CSSEGISandData/COVID-19' target='_blank'>Github Johns Hopkins University</a></li></h4>
<h4><li>Spatial Polygons : <a href='https://www.naturalearthdata.com/downloads/' target='_blank'> Natural Earth</a></li></h4>"
))
))
#load('./output/covid-19.RData')
shinyServer(function(input, output) {
#----------------------------------------
#tab panel 1 - Home Plots
#preapare data for plot
output$case_overtime <- renderPlotly({
#determin the row index for subset
req(input$log_scale)
end_date_index <- which(date_choices == input$date)
#if log scale is not enabled, we will just use cases
if (input$log_scale == FALSE) {
#render plotly figure
case_fig <- plot_ly()
#add comfirmed case lines
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~as.numeric(aggre_cases[input$country,])[1:end_date_index],
line = list(color = 'rgba(67,67,67,1)', width = 2),
name = 'Confirmed Cases')
#add death line
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~as.numeric(aggre_death[input$country,])[1:end_date_index],
name = 'Death Toll')
#set the axis for the plot
case_fig <- case_fig %>%
layout(title = paste0(input$country,'\t','Trend'),
xaxis = list(title = 'Date',showgrid = FALSE),
yaxis = list(title = 'Comfirmed Cases/Deaths',showgrid=FALSE)
)
}
#if enable log scale, we need to take log of the y values
else{
#render plotly figure
case_fig <- plot_ly()
#add comfirmed case lines
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~log(as.numeric(aggre_cases[input$country,])[1:end_date_index]),
line = list(color = 'rgba(67,67,67,1)', width = 2),
name = 'Confirmed Cases')
#add death line
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~log(as.numeric(aggre_death[input$country,])[1:end_date_index]),
name = 'Death Toll')
#set the axis for the plot
case_fig <- case_fig %>%
layout(title = paste0(input$country,'<br>','\t','Trends'),
xaxis = list(title = 'Date',showgrid = FALSE),
yaxis = list(title = 'Comfirmed Cases/Deaths(Log Scale)',showgrid=FALSE)
)
}
return(case_fig)
})
#----------------------------------------
#tab panel 2 - Maps
data_countries <- reactive({
if(!is.null(input$choices)){
if(input$choices == "Cases"){
return(aggre_cases_copy)
}else{
return(aggre_death_copy)
}}
})
#get the largest number of count for better color assignment
maxTotal<- reactive(max(data_countries()%>%select_if(is.numeric), na.rm = T))
#color palette
pal <- reactive(colorNumeric(c("#FFFFFFFF" ,rev(inferno(256))), domain = c(0,log(binning(maxTotal())))))
output$map <- renderLeaflet({
map <-  leaflet(countries) %>%
addProviderTiles("Stadia.Outdoors", options = providerTileOptions(noWrap = TRUE)) %>%
setView(0, 30, zoom = 3) })
observe({
if(!is.null(input$date_map)){
select_date <- format.Date(input$date_map,'%Y-%m-%d')
}
if(input$choices == "Cases"){
#merge the spatial dataframe and cases dataframe
aggre_cases_join <- merge(countries,
data_countries(),
by.x = 'NAME',
by.y = 'country_names',sort = FALSE)
#pop up for polygons
country_popup <- paste0("<strong>Country: </strong>",
aggre_cases_join$NAME,
"<br><strong>",
"Total Cases: ",
aggre_cases_join[[select_date]],
"<br><strong>")
leafletProxy("map", data = aggre_cases_join)%>%
addPolygons(fillColor = pal()(log((aggre_cases_join[[select_date]])+1)),
layerId = ~NAME,
fillOpacity = 1,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
} else {
#join the two dfs together
aggre_death_join<- merge(countries,
data_countries(),
by.x = 'NAME',
by.y = 'country_names',
sort = FALSE)
#pop up for polygons
country_popup <- paste0("<strong>Country: </strong>",
aggre_death_join$NAME,
"<br><strong>",
"Total Deaths: ",
aggre_death_join[[select_date]],
"<br><strong>")
leafletProxy("map", data = aggre_death_join)%>%
addPolygons(fillColor = pal()(log((aggre_death_join[[select_date]])+1)),
layerId = ~NAME,
fillOpacity = 1,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
}
})
})
#load('./output/covid-19.RData')
shinyUI(navbarPage(title = 'COVID-19',
fluid = TRUE,
collapsible = TRUE,
#Select whichever theme works for the app
theme = shinytheme("journal"),
#--------------------------
#tab panel 1 - Home
tabPanel("Home",icon = icon("home"),
fluidPage(
fluidRow(
column(12,
h1("Global Cases overview across time"),
fluidRow(
#select the date until now
column(6,
sliderInput('date','Date Unitl:',
#first day of data recording
min = as.Date(date_choices[1]),
#present day of data recording
max = as.Date(tail(date_choices,1)),
value = as.Date(date_choices[1]),
timeFormat = "%Y-%m-%d",
animate = TRUE, step = 5),
fluidRow(
#select the country we want to see the trend
column(6,
selectInput('country','Which Country?',
choices = country_names_choices,
selected = 'United States of America')),
#select whether want case number in log-scale or not
column(6,
radioButtons("log_scale", "In Log Scale:",
choices = c(TRUE,FALSE),
selected = FALSE))
)
),
#render plotly output
column(width = 6,
plotlyOutput('case_overtime'))
)
)
)
)
),
#--------------------------
#tab panel 2 - Map
tabPanel("Maps",icon = icon("map-marker-alt"),div(class = 'outer',
leafletOutput("map", width = "100%", height = "1200"),
absolutePanel(id = "control", class = "panel panel-default", fixed = TRUE, draggable = TRUE,
top = 300, left = 20, right = "auto", bottom = "auto", width = 250, height = "auto",
selectInput('choices','Which data to visualize:',
choices = c('Cases','Death'),
selected = c('Cases')),
sliderInput('date_map','Input Date:',
#first day of data recording
min = as.Date(date_choices[1]),
#present day of data recording
max = as.Date(tail(date_choices,1)),
value = as.Date('2020-04-01','%Y-%m-%d'),
timeFormat = "%Y-%m-%d",
animate = TRUE, step = 5),
style = "opacity: 0.80"))),
# ----------------------------------
#tab panel 3 - Source
tabPanel("Data Source",icon = icon("cloud-download"),
HTML(
"<h2> Data Source : </h2>
<h4> <p><li><a href='https://coronavirus.jhu.edu/map.html'>Coronavirus COVID-19 Global Cases map Johns Hopkins University</a></li></h4>
<h4><li>COVID-19 Cases : <a href='https://github.com/CSSEGISandData/COVID-19' target='_blank'>Github Johns Hopkins University</a></li></h4>
<h4><li>Spatial Polygons : <a href='https://www.naturalearthdata.com/downloads/' target='_blank'> Natural Earth</a></li></h4>"
))
))
runApp()
runApp()
runApp()
#
read.csv(text=GET("https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_daily_reports_us/04-12-2020.csv"))
install.packages("httr")
install.packages("httr")
#
library(httr)
read.csv(text=GET("https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_daily_reports_us/04-12-2020.csv"))
read.csv(text=GET("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/04-12-2020.csv")
read.csv(text=GET("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/04-12-2020.csv"))
read.csv(text=GET("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/04-12-2020.csv"))
getURL("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/04-12-2020.csv")
getURL("https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports_us")
test <- getURL("https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports_us")
test[1]
typeof(test)
typeof(test[1])
str(test)
filename <- list.files(pattern = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/*.csv")
filename
temp <- lapply(filename, read.csv)
filename <- list.files(pattern = "[https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/,*.csv]")
temp <- lapply(filename, read.csv)
filename <- list.files(pattern = "[https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/]*.csv")
paste("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/]",".csv")
paste0("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/",".csv")
today()
Sys.Date()
as.Date("04-12-2020")
as.Date("12-04-2020")
as.Date("04-12-2020", "%m-%d-%y")
as.Date("04-12-2020", "%mm-%dd-%yy")
as.Date("04-12-2020", "y-m-d")
as.Date("04-12-2020", "m-d-y")
as.Date("04-12-2020", "mm-dd-yyyy")
test <- getURL("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/04-12-2020.csv")
read.csv(text = test)
test <- getURL("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us")
test
test <- getURL("https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports_us")
test
Sys.Date()
cat(Sys.Date())
print(i)
for (i in as.Date("04-12-2020"):Sys.Date()) {
print(i)
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
print(year(i))
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
print(lubridate::year(i))
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
print(lubridate::year(as.Date(i)))
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
print(as.Date(i))
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
print(Date(i))
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
as.Date(i)
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
i
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
as.Date(i, '%d%b%y')
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
zoo::as.Date(i)
}
install.packages('zoo')
for (i in as.Date("04-12-2020"):Sys.Date()) {
zoo::as.Date(i)
}
for (i in as.Date("04-12-2020"):Sys.Date()) {
t <- zoo::as.Date(i)
}
